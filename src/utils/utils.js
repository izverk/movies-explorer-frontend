import { useState, useEffect, useCallback } from 'react';
import { moviesApiURL } from './constants';

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–∞ —Ñ–∏–ª—å–º–æ–≤ —Å —É—á–µ—Ç–æ–º –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
export function handleMovies(movies, keyWord, isOnlyShortFilms) {
	// –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–æ–º–µ—Ç—Ä–∞–∂–∫–∏ (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä (—á–µ–∫–±–æ–∫—Å))
	if (isOnlyShortFilms) {
		movies = filterWithDuration(movies);
	}
	console.log(
		'üöÄ ~ file: utils.js ~ line 9 ~ filterMoviesWithDuration ~ movies',
		movies
	);
	// –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∏–ª—å–º—ã —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
	movies = filterWithKeyWord(movies, keyWord);
	console.log(
		'üöÄ ~ file: utils.js ~ line 13 ~ filterMoviesWithKeyWord ~ movies',
		movies
	);
	// –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å—Ç—Ä–æ–∫—É –Ω—É–∂–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞, –¥–µ–ª–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö
	movies = handleFields(movies);
	console.log('üöÄ ~ file: utils.js ~ line 16 ~ handleMovies ~ movies', movies);
	// –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤
	return movies;

	// –í–´–®–ï–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –§–ò–õ–¨–¢–†–ê–¶–ò–ò –ò –û–ë–†–ê–ë–û–¢–ö–ò –ú–ê–°–°–ò–í–û–í
	function filterWithDuration(movies) {
		const durationLimit = 40;
		return movies.filter((movie) => {
			return movie.duration <= durationLimit;
		});
	}

	function filterWithKeyWord(movies, keyWord) {
		return movies.filter((movie) => {
			return movie.nameRU.toLowerCase().includes(keyWord.toLowerCase());
		});
	}

	function handleFields(movies) {
		return movies.map((movie) => {
			const handledDuration =
				Math.trunc(movie.duration / 60) + ' —á ' + (movie.duration % 60) + ' –º';
			const handledURL = moviesApiURL + movie.image.url;

			return {
				id: movie.id,
				nameRU: movie.nameRU,
				image: { url: handledURL },
				trailerLink: movie.trailerLink,
				duration: handledDuration,
			};
		});
	}
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–ø–∞–ø–æ–≤ –ø–æ –Ω–∞–∂–∞—Ç–∏—é Esc
export function useClosePopupByEscape(closePopupHandler) {
	useEffect(() => {
		const closeByEscape = (e) => {
			if (e.key === 'Escape') {
				closePopupHandler();
			}
		};
		document.addEventListener('keydown', closeByEscape);
		return () => document.removeEventListener('keydown', closeByEscape);
	}, [closePopupHandler]);
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–ø–∞–ø–∞ –ø–æ –∫–ª–∏–∫—É –º—ã—à–∏ –Ω–∞ –æ–≤–µ—Ä–ª–µ–µ –∏–ª–∏ –Ω–∞ –∫—Ä–µ—Å—Ç–∏–∫–µ
export function useClosePopupByMouse(
	isOpen,
	overlayClassName,
	closeButtonClassName,
	closePopupHandler
) {
	useEffect(() => {
		function handleMouseClose(evt) {
			if (
				evt.target.classList.contains(overlayClassName) ||
				evt.target.classList.contains(closeButtonClassName)
			) {
				closePopupHandler();
			}
		}
		if (isOpen) {
			document.addEventListener('mousedown', handleMouseClose);
		} else return;
		return () => {
			document.removeEventListener('mousedown', handleMouseClose);
		};
	}, [isOpen, overlayClassName, closeButtonClassName, closePopupHandler]);
}

// –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º
export function useFormValidation() {
	const [values, setValues] = useState({});
	const [errors, setErrors] = useState({});
	const [isValid, setIsValid] = useState(false);

	function handleValuesChange(e) {
		const name = e.target.name;

		setValues({ ...values, [name]: e.target.value });
		setErrors({ ...errors, [name]: e.target.validationMessage });
		setIsValid(e.target.closest('form').checkValidity());
	}
	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –∏–Ω–ø—É—Ç–æ–≤, —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö –≤–≤–æ–¥–∞ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –≤ –ø–æ–ø–∞–ø–∞—Ö,
	// –∏—Å–ø–æ–ª—å–∑—É—é—â–∏—Ö –≤–∞–ª–∏–¥–∞—Ü–∏—é (–º–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è —Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞)
	const resetValidation = useCallback(
		function ({ values = {}, errors = {}, isValid = false }) {
			setValues(values);
			setErrors(errors);
			setIsValid(isValid);
		},
		[setValues, setErrors, setIsValid]
	);

	return { values, errors, isValid, handleValuesChange, resetValidation };
}
